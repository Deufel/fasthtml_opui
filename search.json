[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "fasthtml_opui",
    "section": "",
    "text": "This Libary is designed as an educational project to make using the Open Props UI Library easy to set up with a fast HTML Web App.\nThe first part of this app will build “vendor” the required css structure for setting up the appplication to use; - Open Props CSS Custom Variables - Open Props UI\nFuture : FT implementation of - Simple Theme Changer Commponent - Simple Color Changer Component - Tabs - Button Group - Icons - Scroll - Text Size Changer - Full Screen / Centered",
    "crumbs": [
      "fasthtml_opui"
    ]
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "fasthtml_opui",
    "section": "Usage",
    "text": "Usage\n\nInstallation\nInstall latest from from pypi\n$ pip install fasthtml_opui\n\n\nDocumentation\nDocumentation can be found hosted on this GitHub repository’s pages. Additionally you can find package manager specific guidelines on conda and pypi respectively.",
    "crumbs": [
      "fasthtml_opui"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "fasthtml_opui",
    "section": "How to use",
    "text": "How to use\n    from fasthtml.common import *\n    # Import specific classes from fasthtml_opui\n    from fasthtml_opui.core import OpenProps, OpenPropsSync\n    \n    # Initialize OpenProps syncer and sync files\n    syncer = OpenPropsSync()\n    syncer.sync_all()\n    \n    # Create FastHTML app\n    app, rt = fast_app(hdrs=OpenProps('dark', 'cyan'), pico=False)\n    \n    @rt('/')\n    def get():\n        return Titled(\"Welcome\",\n            Article(\n                H2(\"Hello World\"),\n                P(\"This is a FastHTML app using OpenProps UI\"),\n                Button(\"Click me!\", cls=\"button\")\n            )\n        )\n    \n    serve()\nfrom fasthtml.common import *\n\n\n# Import specific classes from fasthtml_opui\nfrom fasthtml_opui.core import OpenProps, OpenPropsSync\n\n# Initialize OpenProps syncer and sync files\nsyncer = OpenPropsSync()\nsyncer.sync_all()\n    \n# Optionally sync any additional custom CSS files\nsyncer.sync_custom_css(\"https://example.com/special-styles.css\", \"special.css\")\n\n# Set up FastHTML with head-support extension and initial theme CSS\napp, rt = fast_app(\n    exts='head-support',  # Enable head tag support\n    pico=False,\n    hdrs=(\n        Style(\"\"\"\n            :root {\n                --color-scheme: system;\n                --palette-hue: 210;\n                --palette-hue-rotate-by: 0;\n                --palette-chroma: 0.89;\n            }\n        \"\"\"),\n        OpenProps('custom/utilities.css'),\n    )\n)",
    "crumbs": [
      "fasthtml_opui"
    ]
  },
  {
    "objectID": "theme_test.html",
    "href": "theme_test.html",
    "title": "fasthtml_opui",
    "section": "",
    "text": "from fasthtml.common import *\n\nfrom fasthtml.common import *\n# from lucide_fasthtml import Lucide\ntake_active = \"\"\" on htmx:afterOnLoad from &lt;div/&gt; call htmx.takeClass(event.target, 'active')\"\"\"\n\n\n# Add this near the top of your file, after your imports\nDEFAULT_THEME = {\n    'theme_color_scheme': 'dark',\n    'theme_hue': 210,\n    'theme_rotate': 0,\n    'theme_chroma': 0.89,\n    'theme_root_size': 100,\n    'theme_button_radius': '--radius-round'\n}\n\n# Add this near your DEFAULT_THEME at the top\nRADIUS_MAP = {\n    0: '--radius-1',\n    1: '--radius-2',\n    2: '--radius-3',\n    3: '--radius-4',\n    4: '--radius-round'\n}\n\n\n# Add HighlightJS to your headers\napp, rt = fast_app(\n    exts='head-support',\n    pico=False,\n    hdrs=(\n        Link(rel='stylesheet', href='https://deufel.github.io/css/css/main.css'),\n        # Add HighlightJS with CSS support\n        HighlightJS(langs=['css']),\n        # Add Tokyo Night theme\n        Link(rel='stylesheet',\n             href='https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/tokyo-night-dark.min.css')\n    )\n)\n\n\n\ndef css_preview(session):\n    return Div(cls=\"card outlined margin\")(\n        Hgroup(\n            P(\"Live CSS\", cls=\"overline\"),\n            H2(\"Current Theme CSS\"),\n            P(\"This shows the current CSS being applied to the page\"),\n        ),\n        Pre(style=\"max-width: none; width: 100%;\")(\n            Code( id=\"css-preview\", hx_get=\"/theme-css\", hx_trigger=\"theme-update from:body\", hx_swap=\"innerHTML\", style=\" overflow: hidden;\")(\n                generate_theme_css(session),\n        )),\n        Script(\"\"\"\n        (function() {\n            // Initial highlight\n            hljs.highlightElement(document.querySelector('#css-preview'));\n\n            // Debounced highlight function\n            let highlightTimeout;\n            function debouncedHighlight() {\n                clearTimeout(highlightTimeout);\n                highlightTimeout = setTimeout(() =&gt; {\n                    const codeElement = document.querySelector('#css-preview');\n                    if (codeElement) hljs.highlightElement(codeElement);\n                }, 50);\n            }\n\n            // Listen for content updates\n            htmx.on('#css-preview', 'htmx:afterSwap', debouncedHighlight);\n        })();\n        \"\"\")\n    )\n\ndef generate_theme_css(session):\n    \"\"\"Generate CSS from session theme values\"\"\"\n    css = [':root {']\n    css.append(f'color-scheme: {session[\"theme_color_scheme\"]};')\n    css.append(f'--palette-hue: {session[\"theme_hue\"]};')\n    css.append(f'--palette-hue-rotate-by: {session[\"theme_rotate\"]};')\n    css.append(f'--palette-chroma: {session[\"theme_chroma\"]};')\n    css.append(f'font-size: {session[\"theme_root_size\"]}%;')\n    css.append(f'--button-border-radius: var({session[\"theme_button_radius\"]});')\n    css.append('}')\n    return '\\n'.join(css)\n\n# Routes\n\n@rt(\"/theme-css\")\ndef get(session):\n    return Code(generate_theme_css(session))\n\n# Modify the post route to handle the numeric radius value\n@rt(\"/theme\")\ndef post(session, color_scheme:int=None, hue:int=None, rotate:int=None,\n         chroma:float=None, root_size:int=None, button_radius:int=None):\n\n    # Convert the numeric values to their corresponding strings\n    if color_scheme is not None:\n        scheme_map = {0: 'light', 1: 'dark'}\n        color_scheme = scheme_map[color_scheme]\n\n    if button_radius is not None:\n        button_radius = RADIUS_MAP[button_radius]\n\n    # Validation\n    if color_scheme and color_scheme not in ['light','dark']: return\n    if hue is not None and not (0 &lt;= hue &lt;= 360): return\n    if rotate is not None and not (-20 &lt;= rotate &lt;= 20): return\n    if chroma is not None and not (0 &lt;= chroma &lt;= 1): return\n    if root_size is not None and not (50 &lt;= root_size &lt;= 200): return\n\n    # Store valid values in session\n    if color_scheme: session['theme_color_scheme'] = color_scheme\n    if hue is not None: session['theme_hue'] = hue\n    if rotate is not None: session['theme_rotate'] = rotate\n    if chroma is not None: session['theme_chroma'] = chroma\n    if root_size is not None: session['theme_root_size'] = root_size\n    if button_radius is not None: session['theme_button_radius'] = button_radius\n\n    # Your existing CSS generation code\n    css = [':root {']\n    if color_scheme: css.append(f'color-scheme: {color_scheme};')\n    if hue is not None: css.append(f'--palette-hue: {hue};')\n    if rotate is not None: css.append(f'--palette-hue-rotate-by: {rotate};')\n    if chroma is not None: css.append(f'--palette-chroma: {chroma};')\n    if root_size is not None: css.append(f'font-size: {root_size}%;')\n    if button_radius is not None: css.append(f'--button-border-radius: var({button_radius});')\n    css.append('}')\n    css_text = '\\n'.join(css)\n\n    # return Style('\\n'.join(css), hx_head=\"re-eval\")\n\n    return (\n            Style(css_text, hx_head=\"re-eval\"),\n            Script(\"htmx.trigger(document.body, 'theme-update');\")\n        )\n\n\n\n@rt(\"/\")\ndef get(session):\n    \"\"\"Main theme configurator page\"\"\"\n    # Initialize theme settings if not present\n    for key, value in DEFAULT_THEME.items():\n        session.setdefault(key, value)\n    # Initial CSS from session\n    initial_css = Style(generate_theme_css(session), hx_head='merge')\n\n\n    theme_controls = (\n        Div(cls=\"card outlined margin\")(\n            Hgroup(\n                P(\"Theme Controls\", cls=\"overline\"),\n                H2(\"Theme\"),\n                P(\"Move the sliders to see the change in the Design System Components\"),\n            ),\n\n            Div(cls=\"content\")(\n                # Color scheme selector\n                Div(\n                    Label(cls=\"range\")(\n                        Span(cls=\"label\")(\"Theme Mode (Light ↔ Dark)\"),\n                        Input(\n                            type='range',\n                            min=0,\n                            max=1,\n                            step=1,\n                            value={'light': 0, 'dark': 1}[session['theme_color_scheme']],\n                            name=\"color_scheme\",\n                            hx_post=\"/theme\",\n                            hx_trigger=\"change\"\n                        )\n                    )\n                ),\n                # Button radius selector (now as a range)\n                Div(\n                    Label(cls=\"range\")(\n                        Span(cls=\"label\")(\"Button Radius (Sharp → Round)\"),\n                        Input(\n                            type='range',\n                            min=0,\n                            max=4,\n                            step=1,\n                            value=[k for k, v in RADIUS_MAP.items()\n                                    if v == session['theme_button_radius']][0],\n                            name=\"button_radius\",\n                            hx_post=\"/theme\",\n                            hx_trigger=\"change\"\n                        )\n                    )\n                ),\n                # Root size control\n                Div(\n                    Label(cls=\"range\")(\n                        Span(cls=\"label\")(\"Root Size (%) [50, 200]\"),\n                        Input( type='range', min=50, max=200, value=session['theme_root_size'], name=\"root_size\", hx_post=\"/theme\", hx_trigger=\"change\" )\n                    )\n                ),\n                # Hue control\n                Div(\n                    Label(cls=\"range\")(\n                        Span(cls=\"label\")(\"Theme Hue [0, 360]\"),\n                        Input( type='range', min=0, max=360, value=session['theme_hue'], name=\"hue\", hx_post=\"/theme\", hx_trigger=\"change\" )\n                    )\n                ),\n                # Rotation control\n                Div(\n                    Label(cls=\"range\")(\n                        Span(cls=\"label\")(\"Color Palet Hue Step [-20, 20]\"),\n                        Input( type='range', min=-20, max=20, value=session['theme_rotate'], name=\"rotate\", hx_post=\"/theme\", hx_trigger=\"change\" )\n                    )\n                ),\n                # Chroma control\n                Div(\n                    Label(cls=\"range\")(\n                        Span(cls=\"label\")(\"Chroma [0,1]\"),\n                        Input( type='range', min=0, max=1, value=session['theme_chroma'], step=0.01, name=\"chroma\", hx_post=\"/theme\", hx_trigger=\"change\" )\n                    )\n                )\n            ),\n\n            Div(cls=\"actions\")(\n                Button(cls=\"button\")         (\"Default\"),\n                Button(cls=\"button outlined\")(\"Outlined\"),\n                Button(cls=\"button tonal\")   (\"Tonal\"),\n                Button(cls=\"button filled\")  (\"Filled\"),\n                Button(cls=\"button elevated\")(\"Elevated\"),\n            )\n        ),\n    )\n\n\n    # Component preview sections\n    preview = (\n        # Color Palette\n        Div(cls=\"card outlined margin\")(\n            Hgroup(\n                P(\"Color Palette\"),\n                H2(\"Theme Colors\"),\n            ),\n            Div(cls=\"flex-wrap padding\")(\n                *[\n                    Div(\n                        Style=f\"\"\"\n                            width: var(--size-8);\n                            height: var(--size-8);\n                            background: var(--color-{i});\n                            border-radius: var(--radius-2);\n                            position: relative;\n                            display: flex;\n                            align-items: center;\n                            justify-content: center;\n                        \"\"\"\n                    )(\n                        P(Style=f\"color: lch(from var(--color-{i}) calc((50 - l) * infinity) 0 0 )\")(i)\n                    )\n                    for i in range(1, 13)\n                ]\n            )\n        ),\n\n\n\n        # CSS Preview card\n        css_preview(session)\n\n    )\n\n    return (\n            Title(\"OpenProps UI Theme Previewer\"),\n            Div(cls=\"flex-center\")(\n                initial_css,  # Add the initial CSS here\n                Container(hx_ext=\"head-support\")(\n                    theme_controls,\n                    preview,\n                )\n            )\n        )",
    "crumbs": [
      "theme_test.html"
    ]
  },
  {
    "objectID": "00_core.html#get-css",
    "href": "00_core.html#get-css",
    "title": "fasthtml_opui",
    "section": "Get CSS",
    "text": "Get CSS\n\n\nget_css\n\n get_css (static_dir=None)\n\nSync OpenProps and OpenProps UI files to local static directory",
    "crumbs": [
      "core"
    ]
  },
  {
    "objectID": "00_core.html#update-jupyter-styles",
    "href": "00_core.html#update-jupyter-styles",
    "title": "fasthtml_opui",
    "section": "Update Jupyter Styles",
    "text": "Update Jupyter Styles\n\ndef apply_global_style(css_file):\n    \"\"\"\n    Applies a global stylesheet via CDN this will change the behavior of all show() untill notebook is restarted.\n    Note: This will affect ALL elements on the page, including previously rendered ones.\n    \"\"\"\n    display(HTML(f\"&lt;link rel='stylesheet' href='{css_file}'&gt;\"))\n    return \n\n\napply_global_style(\"nbs/static/css/main.css\")\n\n\n\n\n\n\"\"\"\nCSS Flattener - Combines all CSS files from OpenProps UI structure into a single flat file\n\"\"\"\n\nimport os\nimport re\nfrom pathlib import Path\n\n\ndef flatten_css(css_dir=None, output_file=None):\n    \"\"\"\n    Combine all CSS files from OpenProps UI structure into a single flat file\n    \n    Args:\n        css_dir (str): Path to the CSS directory (default: 'static/css')\n        output_file (str): Path to the output file (default: 'static/css/flat.css')\n    \"\"\"\n    # Set default paths if not provided\n    css_dir = Path(css_dir or 'static/css')\n    output_file = Path(output_file or css_dir / 'flat.css')\n    \n    if not css_dir.exists() or not css_dir.is_dir():\n        raise ValueError(f\"CSS directory not found: {css_dir}\")\n    \n    # Read the main.css file first to determine import order\n    main_css_path = css_dir / 'main.css'\n    if not main_css_path.exists():\n        raise ValueError(f\"main.css not found in {css_dir}\")\n    \n    main_css = main_css_path.read_text(encoding='utf-8')\n    \n    # Extract layer information\n    layer_match = re.search(r'@layer\\s+(.*?);', main_css)\n    layers = []\n    if layer_match:\n        layers = [layer.strip() for layer in layer_match.group(1).split(',')]\n        print(f\"Found layers: {', '.join(layers)}\")\n    \n    # Extract import statements\n    import_pattern = re.compile(r'@import\\s+[\"\\'](.+?)[\"\\'](?:\\s+layer\\((.*?)\\))?;')\n    imports = []\n    \n    for match in import_pattern.finditer(main_css):\n        path = match.group(1)\n        layer = match.group(2) if match.group(2) else None\n        imports.append((path, layer))\n    \n    # Process imports\n    combined_css = []\n    processed_files = set()\n    \n    # Add layer declaration if layers were found\n    if layers:\n        combined_css.append(f\"@layer {', '.join(layers)};\")\n    \n    for path, layer in imports:\n        # Convert relative paths\n        if path.startswith('./'):\n            file_path = css_dir / path[2:]\n        elif path.startswith('opbeta/'):\n            file_path = css_dir / path\n        else:\n            file_path = css_dir / path\n        \n        if not file_path.exists():\n            print(f\"Warning: File not found: {file_path}\")\n            continue\n        \n        # Avoid processing files more than once\n        if str(file_path) in processed_files:\n            continue\n        \n        # Read the file\n        css_content = file_path.read_text(encoding='utf-8')\n        \n        # Skip import statements within the imported file\n        css_content = re.sub(r'@import\\s+[\"\\'].*?[\"\\'].*?;', '', css_content)\n        \n        # Add layer wrapper if specified\n        if layer:\n            combined_css.append(f\"/* From: {path} */\")\n            combined_css.append(f\"@layer {layer} {{\")\n            combined_css.append(css_content.strip())\n            combined_css.append(\"}\")\n        else:\n            combined_css.append(f\"/* From: {path} */\")\n            combined_css.append(css_content.strip())\n        \n        combined_css.append(\"\")  # Empty line for separation\n        processed_files.add(str(file_path))\n    \n    # Save combined CSS to output file\n    output_file.parent.mkdir(parents=True, exist_ok=True)\n    output_file.write_text(\"\\n\".join(combined_css), encoding='utf-8')\n    \n    print(f\"\\nFlattened CSS created at: {output_file}\")\n    print(f\"Combined {len(processed_files)} CSS files\")\n\n\n# if __name__ == \"__main__\":\n#     import argparse\n    \n#     parser = argparse.ArgumentParser(description=\"Flatten CSS files into a single file\")\n#     parser.add_argument(\"--css-dir\", \"-d\", help=\"Path to CSS directory (default: static/css)\")\n#     parser.add_argument(\"--output\", \"-o\", help=\"Output file path (default: static/css/flat.css)\")\n    \n#     args = parser.parse_args()\n    \n#     try:\n#         flatten_css(args.css_dir, args.output)\n#     except Exception as e:\n#         print(f\"Error: {str(e)}\")\n\n\ncss_flat = \"https://github.com/Deufel/css/blob/f183a433e7225f466c595e57a7d066c6bbfc25bb/static/css/flat.css\"\n\n\nfrom IPython.display import HTML\n\ndef create_styled_iframe(content, css_url=\"https://cdn.jsdelivr.net/gh/Deufel/css@030f494da6ab7876da9077f878dfd84fcfbb3bc2/css/main.css\", height=\"300px\", width=\"100%\"):\n    iframe_html = f\"\"\"\n    &lt;iframe srcdoc='\n        &lt;!DOCTYPE html&gt;\n        &lt;html&gt;\n        &lt;head&gt;\n            &lt;link rel=\"stylesheet\" href=\"{css_url}\"&gt;\n            &lt;script src=\"https://unpkg.com/htmx.org@1.9.10\"&gt;&lt;/script&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            {content}\n        &lt;/body&gt;\n        &lt;/html&gt;\n    ' style=\"width: {width}; height: {height}; border: 1px solid #ddd; border-radius: 4px;\"&gt;&lt;/iframe&gt;\n    \"\"\"\n    return HTML(iframe_html)\n\nhtml_content = \"\"\"\n&lt;div class=\"card elevated\"&gt;\n  &lt;hgroup&gt;\n    &lt;h2&gt;Test Component&lt;/h2&gt;\n  &lt;/hgroup&gt;\n  &lt;div class=\"content\"&gt;\n    &lt;p&gt;This is a test of the OpenProps styling&lt;/p&gt;\n    &lt;button class=\"button\"&gt;Primary Button&lt;/button&gt;\n    &lt;button class=\"button secondary\"&gt;Secondary Button&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\"\"\"\ndisplay(create_styled_iframe(html_content))\n\n\n    \n    \n\n\n\nfrom IPython.display import HTML\n\ndef create_styled_iframe(content, css_url=\"https://cdn.jsdelivr.net/gh/Deufel/css@ebf95dcad18a553ab53c83f76b5ab026cb91bc21/static/css/main.css\", height=\"300px\", width=\"100%\"):\n    iframe_html = f\"\"\"\n    &lt;iframe srcdoc='\n        &lt;!DOCTYPE html&gt;\n        &lt;html&gt;\n        &lt;head&gt;\n            &lt;link rel=\"stylesheet\" href=\"{css_url}\"&gt;\n            &lt;script src=\"https://unpkg.com/htmx.org@1.9.10\"&gt;&lt;/script&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            {content}\n        &lt;/body&gt;\n        &lt;/html&gt;\n    ' style=\"width: {width}; height: {height}; border: 1px solid #ddd; border-radius: 4px;\"&gt;&lt;/iframe&gt;\n    \"\"\"\n    return HTML(iframe_html)\n\nhtml_content = \"\"\"\n&lt;div class=\"card elevated padding\"&gt;\n  &lt;hgroup&gt;\n    &lt;h2&gt;Test Component&lt;/h2&gt;\n  &lt;/hgroup&gt;\n  &lt;div class=\"content\"&gt;\n    &lt;p&gt;This is a test of the OpenProps styling&lt;/p&gt;\n    &lt;button class=\"button\"&gt;Default&lt;/button&gt;\n    &lt;button class=\"button outlined\"&gt;Outlined&lt;/button&gt;\n    &lt;button class=\"button outlined\" disabled&gt;Outlined & disabled&lt;/button&gt;\n    &lt;button class=\"button tonal\"&gt;Outlined&lt;/button&gt;\n    &lt;button class=\"button elevated\"&gt;Outlined&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\"\"\"\ndisplay(create_styled_iframe(html_content))\n\n\n    \n    \n\n\n\nfrom fasthtml.common import *\n\ndef flat_css_link():\n    return Link(\n        rel=\"stylesheet\",\n        href=\"https://cdn.jsdelivr.net/gh/Deufel/css@f183a433e7225f466c595e57a7d066c6bbfc25bb/static/css/flat.css\",\n        type=\"text/css\"\n    )\n\ndef card_examples():\n    return Div(\n        H2(\"Card Examples\"),\n        Div(\n            Button(\"btn\", cls=\"button outlined margin padding\"),\n            Div(Div(\"Outlined\", cls=\"content\"), cls=\"card outlined\"),\n            Div(Div(\"Tonal\", cls=\"content\"), cls=\"card tonal\"),\n            Div(Div(\"Elevated\", cls=\"content\"), cls=\"card elevated\"),\n        ),\n        P(\"These cards demonstrate different variants from the Flat CSS library.\")\n    )\n\n# Preview with Link approach\nshow(\n    flat_css_link(),\n    card_examples()\n)\n\n\n\n  Card Examples\n  \nbtn    \n      Outlined\n    \n    \n      Tonal\n    \n    \n      Elevated\n    \n  \n  These cards demonstrate different variants from the Flat CSS library.\n\n\n\n\n&lt;link rel=\"stylesheet\" href=\"{css_url}\"&gt;",
    "crumbs": [
      "core"
    ]
  },
  {
    "objectID": "01_components.html",
    "href": "01_components.html",
    "title": "fasthtml_opui",
    "section": "",
    "text": "This is the componenet helper functions … WIP\n\n\nsource\n\n\n\n OpenPropsLink ()\n\nGenerates a  tag for the Open Props CSS stylesheet. Usage: Include this in the Head() of your FastHTML page.\n\nsource\n\n\n\n\n Button (*c, size=None, variant='outlined', cls=None, **kwargs)\n\n\nButton(\"Click me\", size=\"small\", variant=\"filled\")\n\n&lt;button class=\"button small filled\"&gt;Click me&lt;/button&gt;\n\n\n\nsource\n\n\n\n\n IconButton (*c, size='small', **kwargs)\n\n*Generates an  for icons with Open Props UI styling.\nArgs: *c: Children (e.g., icon elements). size: Size (‘small’ by default). **kwargs: Additional HTML attributes.\nReturns: FastHTML Button component with appropriate classes.*\n\nIconButton(\"🔍\", size=\"small\")",
    "crumbs": [
      "Components"
    ]
  },
  {
    "objectID": "01_components.html#components",
    "href": "01_components.html#components",
    "title": "fasthtml_opui",
    "section": "",
    "text": "This is the componenet helper functions … WIP\n\n\nsource\n\n\n\n OpenPropsLink ()\n\nGenerates a  tag for the Open Props CSS stylesheet. Usage: Include this in the Head() of your FastHTML page.\n\nsource\n\n\n\n\n Button (*c, size=None, variant='outlined', cls=None, **kwargs)\n\n\nButton(\"Click me\", size=\"small\", variant=\"filled\")\n\n&lt;button class=\"button small filled\"&gt;Click me&lt;/button&gt;\n\n\n\nsource\n\n\n\n\n IconButton (*c, size='small', **kwargs)\n\n*Generates an  for icons with Open Props UI styling.\nArgs: *c: Children (e.g., icon elements). size: Size (‘small’ by default). **kwargs: Additional HTML attributes.\nReturns: FastHTML Button component with appropriate classes.*\n\nIconButton(\"🔍\", size=\"small\")",
    "crumbs": [
      "Components"
    ]
  }
]