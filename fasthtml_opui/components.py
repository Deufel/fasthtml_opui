# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_components.ipynb.

# %% auto 0
__all__ = ['openprops_css', 'OpenPropsLink', 'Button', 'IconButton', 'ToggleButtonGroup', 'Card', 'Checkbox', 'FieldGroup',
           'Field', 'Select', 'Accordion', 'Avatar', 'AvatarGroup', 'Badge', 'Chip', 'Alert', 'Snackbar', 'Tabs']

# %% ../nbs/01_components.ipynb 3
from fasthtml.common import *
from fasthtml import ft


# %% ../nbs/01_components.ipynb 4
openprops_css = "https://deufel.github.io/css/css/main.css"

def OpenPropsLink():
    """
    Generates a <link> tag for the Open Props CSS stylesheet.
    Usage: Include this in the Head() of your FastHTML page.
    """
    return Link(rel="stylesheet", href=openprops_css)

# usage Head(OpenPropsLink())

# %% ../nbs/01_components.ipynb 5
def Button(*c, size=None, variant='outlined', cls=None, **kwargs):
    base_cls = ['button']
    if size in ['small', 'large']:
        base_cls.append(size)
    if variant in ['outlined', 'tonal', 'filled', 'elevated']:
        base_cls.append(variant)
    if cls:
        base_cls.append(cls)
    full_cls = ' '.join(base_cls)
    return ft.Button(*c, cls=full_cls, **kwargs)

# %% ../nbs/01_components.ipynb 7
def IconButton(*c, size='small', **kwargs):
    """
    Generates an <button> for icons with Open Props UI styling.
    
    Args:
        *c: Children (e.g., icon elements).
        size: Size ('small' by default).
        **kwargs: Additional HTML attributes.
    
    Returns:
        FastHTML Button component with appropriate classes.
    """
    cls = ['icon-button']
    if size == 'small':
        cls.append('small')
    return Button(*c, cls=' '.join(cls), **kwargs)

# %% ../nbs/01_components.ipynb 9
def ToggleButtonGroup(*buttons, dynamic=False, size=None, **kwargs):
    """
    Generates a <div> containing toggle buttons with Open Props UI styling.
    
    Args:
        *buttons: Button components to include in the group.
        dynamic: Whether the group is dynamic (adds 'dynamic' class).
        size: Optional size ('small', 'x-small').
        **kwargs: Additional HTML attributes.
    
    Returns:
        FastHTML Div component with appropriate classes and children.
    """
    cls = ['toggle-button-group']
    if dynamic:
        cls.append('dynamic')
    if size in ['small', 'x-small']:
        cls.append(size)
    return Div(*buttons, cls=' '.join(cls), **kwargs)

# %% ../nbs/01_components.ipynb 11
def Card(*c, variant='text', cls=None, **kwargs):
    """
    Generates a <div> for cards with Open Props UI styling.
    
    Args:
        *c: Children (e.g., Hgroup, Div(cls="content"), Div(cls="actions")).
        variant: Variant ('text', 'outlined', 'tonal', 'elevated'). Defaults to 'text'.
        cls: Additional classes to add to the card.
        **kwargs: Additional HTML attributes.
    
    Returns:
        FastHTML Div component with appropriate classes and children.
    """
    # Base classes include 'card' and the specified variant
    base_cls = ['card', variant]
    
    # Append additional classes if provided
    if cls:
        base_cls.append(cls)
    
    # Join all classes into a single string
    full_cls = ' '.join(base_cls)
    
    # Return the Div component with the specified classes and children
    return ft.Div(*c, cls=full_cls, **kwargs)

# %% ../nbs/01_components.ipynb 14
def Checkbox(*c, label=None, size=None, stack=False, error=False, cls=None, **kwargs):
    base_cls = ['checkbox']
    if size in ['small', 'large']:
        base_cls.append(size)
    if stack:
        base_cls.append('stack')
    if error:
        base_cls.append('error')
    if cls:
        base_cls.append(cls)
    full_cls = ' '.join(base_cls)
    input_elem = ft.Input(type="checkbox", **kwargs)
    children = [input_elem]
    if label:
        children.append(ft.Span(label, cls="label"))
    children.extend(c)
    return ft.Label(*children, cls=full_cls)

# %% ../nbs/01_components.ipynb 16
def FieldGroup(*c, direction='column', disabled=False, error=False, legend=None, **kwargs):
    """
    Generates a <fieldset> for grouping fields with Open Props UI styling.
    
    Args:
        *c: Children (e.g., form fields).
        direction: Layout direction ('column' or 'row').
        disabled: Whether the fieldset is disabled.
        error: Whether to show error state (adds 'error' class).
        legend: Optional legend text.
        **kwargs: Additional HTML attributes.
    
    Returns:
        FastHTML Fieldset component with appropriate classes and children.
    """
    cls = ['field-group']
    if direction == 'row':
        cls.append('row')
    if error:
        cls.append('error')
    children = []
    if legend:
        children.append(Legend(legend))
    children.extend(c)
    return Fieldset(*children, disabled=disabled, cls=' '.join(cls), **kwargs)

# %% ../nbs/01_components.ipynb 18
def Field(*c, size=None, variant='outlined', error=False, autofit=False, **kwargs):
    """
    Generates a <div> container for form fields with Open Props UI styling.
    
    Args:
        *c: Children (e.g., Label, Select/Input, supporting text).
        size: Optional size ('small').
        variant: Variant ('outlined' or 'filled').
        error: Whether to show error state (adds 'error' class).
        autofit: Whether to enable auto-fit (adds 'auto-fit' class).
        **kwargs: Additional HTML attributes.
    
    Returns:
        FastHTML Div component with appropriate classes and children.
    """
    cls = ['field', variant]
    if size == 'small':
        cls.append('small')
    if error:
        cls.append('error')
    if autofit:
        cls.append('auto-fit')
    return Div(*c, cls=' '.join(cls), **kwargs)

# %% ../nbs/01_components.ipynb 20
from fasthtml import ft

def Select(*options, size=None, variant='outlined', error=False, autofit=False, **kwargs):
    """
    Generates a <select> field with Open Props UI styling.
    
    Args:
        *options: Option components.
        size: Optional size ('small').
        variant: Variant ('outlined' or 'filled').
        error: Whether to show error state.
        autofit: Whether to enable auto-fit.
        **kwargs: Additional HTML attributes for the select.
    
    Returns:
        FastHTML Field component wrapping the Select.
    """
    select_elem = ft.Select(*options, **kwargs)
    return Field(select_elem, size=size, variant=variant, error=error, autofit=autofit)

# %% ../nbs/01_components.ipynb 22
def Accordion(summary, *content, variant='text', **kwargs):
    """
    Generates a <details> element for accordion with Open Props UI styling.
    
    Args:
        summary: Summary text or element.
        *content: Content inside the accordion.
        variant: Variant ('text' by default).
        **kwargs: Additional HTML attributes.
    
    Returns:
        FastHTML Details component with appropriate classes and children.
    """
    cls = ['accordion', variant]
    return Details(
        Summary(summary),
        Div(*content, cls="content"),
        cls=' '.join(cls),
        **kwargs
    )

# %% ../nbs/01_components.ipynb 24
def Avatar(*c, variant=None, cls=None, **kwargs):
    # Base class for the avatar
    base_cls = ['avatar']
    
    # Add variant class if specified
    if variant in ['squared', 'rounded']:
        base_cls.append(variant)
    
    # Append any additional user-provided classes
    if cls:
        base_cls.append(cls)
    
    # Combine all classes into a single string
    full_cls = ' '.join(base_cls)
    
    # Return a div with the children and combined classes
    return Div(*c, cls=full_cls, **kwargs)

def AvatarGroup(*avatars, spacing=None, cls=None, **kwargs):
    # Base class for the avatar group
    base_cls = ['avatar-group']
    
    # Add spacing class if specified
    if spacing in ['gap-small', 'gap-x-small']:
        base_cls.append(spacing)
    
    # Append any additional user-provided classes
    if cls:
        base_cls.append(cls)
    
    # Combine all classes into a single string
    full_cls = ' '.join(base_cls)
    
    # Return a div with the avatar children
    return Div(*avatars, cls=full_cls, **kwargs)

# %% ../nbs/01_components.ipynb 26
def Badge(*c, label, variant=None, color=None, invisible=False, alignment='start-end', cls=None, **kwargs):
    """
    Creates a badge component based on Open Props UI guidelines.

    Args:
        *c: Optional children (e.g., an icon or SVG).
        label (str): The content to display in the badge (via aria-label).
        variant (str, optional): The variant, either None (default) or 'dot'.
        color (str, optional): The color, one of 'error', 'ok', 'good', or 'warning'.
        invisible (bool, optional): Whether the badge is invisible. Defaults to False.
        alignment (str, optional): The alignment position, one of 'start-start', 'start-end',
                                   'end-start', or 'end-end'. Defaults to 'start-end'.
        cls (str, optional): Additional custom classes to append.
        **kwargs: Additional HTML attributes to pass to the span element.

    Returns:
        Span: A FastHTML Span component representing the badge.
    """
    # Base class for the badge
    base_cls = ['badge']

    # Add variant class if specified
    if variant == 'dot':
        base_cls.append('dot')

    # Add color class if specified
    if color in ['error', 'ok', 'good', 'warning']:
        base_cls.append(color)

    # Add invisible class if specified
    if invisible:
        base_cls.append('invisible')

    # Add alignment class
    if alignment in ['start-start', 'start-end', 'end-start', 'end-end']:
        base_cls.append(alignment)

    # Append any additional user-provided classes
    if cls:
        base_cls.append(cls)

    # Combine all classes into a single string
    full_cls = ' '.join(base_cls)

    # Return a span with the children, aria-label, and combined classes
    return Span(*c, aria_label=label, cls=full_cls, **kwargs)

# %% ../nbs/01_components.ipynb 28
def Chip(*c, tag='div', size=None, variant='tonal', **kwargs):
    """
    Generates a chip component with Open Props UI styling.
    
    Args:
        *c: Children (e.g., chip text).
        tag: Base tag ('div', 'a', or 'button').
        size: Optional size ('small', 'multiline').
        variant: Variant ('tonal' by default).
        **kwargs: Additional HTML attributes.
    
    Returns:
        FastHTML component (Div, A, or Button) with appropriate classes.
    """
    cls = ['chip', variant]
    if size in ['small', 'multiline']:
        cls.append(size)
    if tag == 'div':
        return Div(*c, cls=' '.join(cls), **kwargs)
    elif tag == 'a':
        return A(*c, cls=' '.join(cls), **kwargs)
    elif tag == 'button':
        return Button(*c, cls=' '.join(cls), **kwargs)
    else:
        raise ValueError("Invalid tag for Chip. Must be 'div', 'a', or 'button'.")

# %% ../nbs/01_components.ipynb 30
def Alert(*c, severity='neutral', variant='tonal', **kwargs):
    """
    Generates a <div> for alerts with Open Props UI styling.
    
    Args:
        *c: Children (e.g., alert message).
        severity: Severity class ('neutral' by default).
        variant: Variant ('tonal' by default).
        **kwargs: Additional HTML attributes.
    
    Returns:
        FastHTML Div component with appropriate classes and role.
    """
    cls = ['alert', severity, variant]
    return Div(*c, cls=' '.join(cls), role="alert", **kwargs)

# %% ../nbs/01_components.ipynb 32
def Snackbar(*c, position='bottom-left', absolute=False, visible=False, **kwargs):
    """
    Generates a <div> for snackbars with Open Props UI styling.
    
    Args:
        *c: Children (e.g., snackbar message).
        position: Position class ('bottom-left' by default).
        absolute: Whether to use absolute positioning (adds 'absolute' class).
        visible: Whether the snackbar is visible (adds 'visible' class).
        **kwargs: Additional HTML attributes.
    
    Returns:
        FastHTML Div component with appropriate classes and role.
    """
    cls = ['snackbar', position]
    if absolute:
        cls.append('absolute')
    if visible:
        cls.append('visible')
    return Div(*c, cls=' '.join(cls), role="status", **kwargs)

# %% ../nbs/01_components.ipynb 34
def Tabs(tabs, variant='underlined', panels=None, cls=None, **kwargs):
    """
    Creates a tab navigation component based on Open Props UI guidelines.

    Args:
        tabs (list): List of tuples [(label, id, selected), ...] where:
                     - label: str or FT component for the tab button content
                     - id: str, unique identifier for the tab
                     - selected: bool, whether the tab is initially selected
        variant (str, optional): The variant, either 'underlined' (default) or 'filled'.
        panels (list, optional): List of tuples [(content, id), ...] for tab panels.
                                 If None, only tab buttons are rendered.
        cls (str, optional): Additional custom classes to append to the nav element.
        **kwargs: Additional HTML attributes to pass to the nav element.

    Returns:
        Nav: A FastHTML Nav component representing the tabs, optionally with panels.
    """
    # Validate variant
    if variant not in ['underlined', 'filled']:
        raise ValueError("Variant must be 'underlined' or 'filled'")

    # Base classes for the tabs
    base_cls = ['tabs', variant]

    # Append additional classes if provided
    if cls:
        base_cls.append(cls)
    full_cls = ' '.join(base_cls)

    # Generate tab buttons using ft.Button to avoid custom styling
    tab_buttons = []
    for i, (label, tab_id, selected) in enumerate(tabs):
        btn = ft.Button(
            label,
            id=tab_id,
            role="tab",
            aria_controls=f"{tab_id}-panel" if panels else None,
            aria_selected=str(selected).lower(),
            tabindex="0" if selected else "-1",
            cls="selected" if selected else None
        )
        tab_buttons.append(btn)

    # Wrap buttons in a tablist
    tablist = Div(
        *tab_buttons,
        role="tablist",
        aria_label=f"{variant.capitalize()} tabs"
    )

    # If panels are provided, generate them
    if panels:
        tab_panels = [
            Div(
                content,
                id=f"{tab_id}-panel",
                role="tabpanel",
                aria_labelledby=tab_id,
                hidden=not selected
            )
            for (label, tab_id, selected), (content, _) in zip(tabs, panels)
        ]
        return Nav(tablist, *tab_panels, cls=full_cls, **kwargs)
    
    # If no panels, return just the tab navigation
    return Nav(tablist, cls=full_cls, **kwargs)
